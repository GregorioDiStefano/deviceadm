// Copyright 2016 Mender Software AS
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
package mocks

import mock "github.com/stretchr/testify/mock"
import model "github.com/mendersoftware/deviceadm/model"
import store "github.com/mendersoftware/deviceadm/store"

// DataStore is an autogenerated mock type for the DataStore type
type DataStore struct {
	mock.Mock
}

// DeleteDevice provides a mock function with given fields: id
func (_m *DataStore) DeleteDevice(id model.AuthID) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.AuthID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDevice provides a mock function with given fields: id
func (_m *DataStore) GetDevice(id model.AuthID) (*model.Device, error) {
	ret := _m.Called(id)

	var r0 *model.Device
	if rf, ok := ret.Get(0).(func(model.AuthID) *model.Device); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Device)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.AuthID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDevices provides a mock function with given fields: skip, limit, status
func (_m *DataStore) GetDevices(skip int, limit int, status string) ([]model.Device, error) {
	ret := _m.Called(skip, limit, status)

	var r0 []model.Device
	if rf, ok := ret.Get(0).(func(int, int, string) []model.Device); ok {
		r0 = rf(skip, limit, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Device)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, string) error); ok {
		r1 = rf(skip, limit, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutDevice provides a mock function with given fields: dev
func (_m *DataStore) PutDevice(dev *model.Device) error {
	ret := _m.Called(dev)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Device) error); ok {
		r0 = rf(dev)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

var _ store.DataStore = (*DataStore)(nil)
